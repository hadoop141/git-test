package com.itheima.static_singleinstance;

/**
 * 单例:对外只提供一个实例化对象，也就是说，外面不管得到了几个单例对象，它们的地址值相同
 */

/**
 * 饿汉单例：在创建对象前，对象已经存在
 * <p>
 * 实现饿汉单例的步骤：
 * 步骤1：定义一个类，提供单例对象。
 * 步骤2：私有化构造器
 * 步骤3：定义一个静态变量，存储单例对象，初始化对象。
 * <p>
 * 问题1：为什么要私有化构造器？
 * 如果不私有化构造器，那么外面可以随意创建本类的对象，就不可能导致外面只有一个实例化对象，也就不会是单例了。
 * <p>
 * 问题2：为什么要定义一个静态变量，存储单例对象？
 * 静态变量，属于类，只加载一次，可以通过 类.静态变量 调用，获得对象
 * 这样，外界获得的对象，就是同一个对象了。
 * <p>
 * 问题3：为什么要初始化对象？
 * 因为饿汉单例指的就是，在创建对象前，对象已经存在。
 */

//1.定义一个类，提供单例对象
public class SingleInstanceDemo1 {


    //2.私有化构造器
    private SingleInstanceDemo1() {
    }

    //3.定义一个静态变量，存储单例对象，初始化对象
    static SingleInstanceDemo1 instance = new SingleInstanceDemo1();
}
