package com.itheima.static_singleinstance;

/**
 * 单例:对外只提供一个实例化对象，也就是说，外面不管得到了几个单例对象，它们的地址值相同
 */

/**
 * 懒汉单例：需要创建对象的时候，才去创建对象
 * <p>
 * 实现懒汉单例的步骤：
 * 步骤1：定义一个类，提供单例对象
 * 步骤2：私有化构造器
 * 步骤3：定义一个静态变量，存储单例对象，不需要初始化
 * 步骤4：定义一个静态方法，返回单例对象
 * <p>
 * 注意：静态变量需要私有，如果不私有，外面就可以调用这个静态变量，生成对象
 * 而我们需要让外界，通过调用静态方法获取单例对象，
 * 而且如果外界不调用静态方法创建对象，直接调用静态变量创建对象，
 * 那么它们获得对象可能为null，因为我们没有初始化静态变量，而是虚拟机来初始化的，
 * <p>
 * 问题1：为什么要私有化构造器？
 * 如果不私有化构造器，那么外面可以随意创建本类的对象，就不可能导致外面只有一个实例化对象，也就不会是单例了
 * <p>
 * 问题2：为什么要定义一个静态变量，存储单例对象？
 * 静态变量，属于类，只加载一次，可以通过 类.静态变量 调用，获得对象
 * 这样，外界获得的对象，就是同一个对象了。
 */

//1.定义一个类，提供单例对象
public class SingleInstanceDemo2 {

    //2.私有化构造器
    private SingleInstanceDemo2() {
    }

    //3.定义一个静态变量，存储单例对象，不要初始化对象
    //注意静态变量要私有
    private static SingleInstanceDemo2 instance;

    /**
     * 怎么返回单例呢？
     * <p>
     * 我们要进行一个判断：
     * 如果是第一次创建对象，我们直接new一个，赋值给静态变量，直接返回静态变量。
     * 这样静态变量就不是null了，有了地址值。
     * <p>
     * 如果不是第一次创建对象，我们就直接返回静态变量，
     * 因为静态变量是属于类的，只加载一次，如果静态变量初始化了，那么以后静态变量的地址值就不为null，且不会变
     * <p>
     * 怎么判断是不是第一次创建对象呢？ 看静态变量的值是否为null，就可以了
     */
    //4.定义一个静态方法，返回单例对象
    static SingleInstanceDemo2 getInstance() {
        if (instance == null) {
            instance = new SingleInstanceDemo2();
        }

        return instance;
    }


}
